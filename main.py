import logging
import os
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import Router

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = os.getenv("testbot")  # testbot telegram bot token
ADMIN_ID = 167372100  # user_id

logging.basicConfig(level=logging.INFO)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_start_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")]
        ],
        resize_keyboard=True
    )

def get_cancel_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect("requests.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            device TEXT,
            photo_id TEXT,
            memory TEXT,
            battery TEXT,
            kit TEXT,
            defects TEXT,
            urgency TEXT
        )
    """)
    conn.commit()
    conn.close()

init_db()

def save_request(user_id, username, data):
    conn = sqlite3.connect("requests.db")
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO requests (user_id, username, device, photo_id, memory, battery, kit, defects, urgency)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        user_id,
        username,
        data.get("device"),
        data.get("photo_id"),
        data.get("memory"),
        data.get("battery"),
        data.get("kit"),
        data.get("defects"),
        data.get("urgency")
    ))
    conn.commit()
    conn.close()

def get_all_requests():
    conn = sqlite3.connect("requests.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM requests ORDER BY id DESC")
    rows = cur.fetchall()
    conn.close()
    return rows

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_state = {}
questions = [
    ("device", "üì± –ú–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"),
    ("photo", "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"),
    ("memory", "üíæ –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:"),
    ("battery", "üîã –£–∫–∞–∂–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞:"),
    ("kit", "üéÅ –û–ø–∏—à–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç (–∫–æ—Ä–æ–±–∫–∞, –∑–∞—Ä—è–¥–∫–∞ –∏ —Ç.–¥.):"),
    ("defects", "‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):"),
    ("urgency", "‚è≥ –ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω?")
]

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

@router.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ã–∫—É–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
        reply_markup=get_start_kb()
    )

@router.message(F.text == "üì± –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: Message):
    user_state[message.from_user.id] = {"step": 0, "data": {}}
    await message.answer(questions[0][1], reply_markup=get_cancel_kb())

@router.message(F.text | F.photo)
async def process_answer(message: Message):
    user_id = message.from_user.id
    if user_id not in user_state:
        return

    step = user_state[user_id]["step"]
    key, _ = questions[step]

    if key == "photo":
        if not message.photo:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
            return
        user_state[user_id]["data"]["photo_id"] = message.photo[-1].file_id
    else:
        user_state[user_id]["data"][key] = message.text

    step += 1
    if step < len(questions):
        user_state[user_id]["step"] = step
        await message.answer(questions[step][1], reply_markup=get_cancel_kb())
    else:
        data = user_state[user_id]["data"]
        username = message.from_user.username

        save_request(user_id, username, data)

        summary = (
            f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or user_id}\n"
            f"üì± –ú–æ–¥–µ–ª—å: {data['device']}\n"
            f"üíæ –ü–∞–º—è—Ç—å: {data['memory']}\n"
            f"üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {data['battery']}\n"
            f"üéÅ –ö–æ–º–ø–ª–µ–∫—Ç: {data['kit']}\n"
            f"‚ö†Ô∏è –î–µ—Ñ–µ–∫—Ç—ã: {data['defects']}\n"
            f"‚è≥ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {data['urgency']}"
        )

        await bot.send_message(ADMIN_ID, summary)
        photo_id = data.get("photo_id")
        if photo_id:
            await bot.send_photo(ADMIN_ID, photo_id)

        await message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
            reply_markup=get_start_kb()
        )
        user_state.pop(user_id, None)

@router.message(Command("list"))
async def list_requests(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    rows = get_all_requests()
    if not rows:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return

    for req in rows[:10]:
        req_id, user_id, username, device, photo_id, memory, battery, kit, defects, urgency = req
        caption = (
            f"üìå –ó–∞—è–≤–∫–∞ #{req_id}\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or user_id}\n"
            f"üì± –ú–æ–¥–µ–ª—å: {device}\n"
            f"üíæ –ü–∞–º—è—Ç—å: {memory}\n"
            f"üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: {battery}\n"
            f"üéÅ –ö–æ–º–ø–ª–µ–∫—Ç: {kit}\n"
            f"‚ö†Ô∏è –î–µ—Ñ–µ–∫—Ç—ã: {defects}\n"
            f"‚è≥ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {urgency}"
        )
        if photo_id:
            await bot.send_photo(message.chat.id, photo_id, caption=caption)
        else:
            await message.answer(caption)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

